# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Load and preprocess the dataset (Assuming a CSV file with image paths and labels)
# Replace 'your_dataset.csv' with the actual dataset file
dataset = pd.read_csv('your_dataset.csv')

# Split the dataset into training and validation sets
train_data, val_data = train_test_split(dataset, test_size=0.2, random_state=42)

# Image Data Augmentation
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
val_datagen = ImageDataGenerator(rescale=1./255)

# Define the CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(128, 128, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(units=128, activation='relu'))
model.add(Dense(units=1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Image Data Flow
train_generator = train_datagen.flow_from_dataframe(dataframe=train_data, x_col='image_path', y_col='label',
                                                    target_size=(128, 128), batch_size=32, class_mode='binary')

val_generator = val_datagen.flow_from_dataframe(dataframe=val_data, x_col='image_path', y_col='label',
                                                target_size=(128, 128), batch_size=32, class_mode='binary')

# Train the model
model.fit(train_generator, epochs=10, validation_data=val_generator)

# Evaluate the model on the test set (replace 'test_dataset.csv' with the actual test set)
test_dataset = pd.read_csv('test_dataset.csv')
test_generator = val_datagen.flow_from_dataframe(dataframe=test_dataset, x_col='image_path', y_col='label',
                                                 target_size=(128, 128), batch_size=32, class_mode='binary')
test_loss, test_acc = model.evaluate(test_generator)
print(f'Test Accuracy: {test_acc}')

# Make predictions
predictions = model.predict(test_generator)
predicted_labels = (predictions > 0.5).astype(int)

# Display classification report
print('Classification Report:')
print(classification_report(test_generator.classes, predicted_labels))
